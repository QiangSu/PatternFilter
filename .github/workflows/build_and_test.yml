name: C++ CI Build and Test

# Controls when the workflow will run
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Check out the repository code
    - name: Checkout code
      uses: actions/checkout@v4

    # Step 2: Install system dependencies required for compilation
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y zlib1g-dev libtbb-dev # Added libtbb-dev

    # Step 3: Compile the Pattern_Filter executable
    - name: Compile Pattern_Filter
      run: |
        echo "Current directory: $(pwd)"
        echo "Listing files in root:"
        ls -l
        echo "Listing files in gzstream:"
        ls -l gzstream
        echo "Listing files in include:"
        ls -l include

        # Updated compilation command
        g++ -std=c++17 -O3 -D USE_PARALLEL_SORT -o Pattern_Filter Pattern_Filter.cpp -lz -pthread -ltbb -I ./include -I ./gzstream ./gzstream/gzstream.C
        echo "Compilation finished."

    # Step 4: Make the compiled executable runnable
    - name: Make executable
      run: chmod +x Pattern_Filter

    # Step 5: Basic smoke test - run with --help
    - name: Run basic test (help)
      run: ./Pattern_Filter --help

    # Step 6: Run a more comprehensive test using your example data
    - name: Run test with example data
      run: |
        echo "Preparing output directories (if needed, program might create them)..."
        # Your program will now create these directories based on the arguments
        # If your program doesn't create them, uncomment the mkdir line:
        # mkdir -p R1_passed R2_extracted Hamming_rejected Basecomp_rejected Test_Temp_Dir_CI

        echo "Running Pattern_Filter with example data..."
        # Using your new example command structure
        ./Pattern_Filter \
          --r1_input test_data/extracted_100000_reads_musWT_STR_R1_001.fastq.gz \
          --r2_input test_data/extracted_100000_reads_musWT_STR_R2_001.fastq.gz \
          --r1_output_dir R1_passed \
          --r2_output_dir R2_extracted \
          --hamming_filterout_dir Hamming_rejected \
          --base_composition_filterout_dir Basecomp_rejected \
          --target_seq "TTTTTTTTTTTTTTT" \
          --seq_length 15 \
          --start_pos 28 \
          --threshold 2 \
          --start_pos_base_com 0 \
          --seq_length_base_com 28 \
          --base_composition_threshold 1.0 \
          --threads 40 \
          --sort-threads 40 \
          --chunk_records 10000000 \
          --sort-mem-mb 204800
          # If your program still has a --temp_dir option, add it here:
          # --temp_dir Test_Temp_Dir_CI \

        echo "Pattern_Filter execution finished."
        echo "Checking for an expected output file..."
        # Adjust this path if your program names the output file differently
        # or if the main passed R1 output is in a different specified directory.
        # This assumes a file named "passed_R1.fastq.gz" (or similar) is created
        # inside the directory specified by --r1_output_dir.
        EXPECTED_OUTPUT_FILE="R1_passed/passed_R1.fastq.gz" # Example, adjust if needed

        if [ -f "$EXPECTED_OUTPUT_FILE" ]; then
          echo "$EXPECTED_OUTPUT_FILE found. Test presumed successful."
        else
          echo "ERROR: Expected output file $EXPECTED_OUTPUT_FILE was NOT found!"
          echo "Listing contents of relevant directories for debugging:"
          echo "--- Contents of R1_passed ---"
          ls -lR R1_passed || echo "R1_passed directory not found or empty."
          echo "--- Contents of current directory ---"
          ls -l
          exit 1 # Fail the workflow
        fi

    # Optional: Step 7: Upload artifacts
    # - name: Upload Pattern_Filter executable
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: pattern-filter-executable-linux
    #     path: Pattern_Filter
    # - name: Upload Test Output
    #   uses: actions/upload-artifact@v3
    #   if: always()
    #   with:
    #     name: test-output-ci
    #     path: |
    #       R1_passed/
    #       R2_extracted/
    #       Hamming_rejected/
    #       Basecomp_rejected/
    #       Test_Temp_Dir_CI/ # If you use a temp dir
